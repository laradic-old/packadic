var Q=require("../q"),Queue=require("../queue");global.Q=Q,require("./lib/jasmine-promise"),describe("queue",function(){it("should enqueue then dequeue",function(){var e=Queue();return e.put(1),e.get().then(function(e){expect(e).toBe(1)})}),it("should dequeue then enqueue",function(){var e=Queue(),t=e.get().then(function(e){expect(e).toBe(1)});return e.put(1),t}),it("should stream",function(){var e=Queue();return Q.try(function(){return Q.delay(20).then(function(){e.put(1)})}).then(function(){return Q.delay(20).then(function(){e.put(2)})}).then(function(){return Q.delay(20).then(function(){e.put(3)})}).done(),Q.try(function(){return e.get().then(function(e){expect(e).toBe(1)})}).then(function(){return e.get().then(function(e){expect(e).toBe(2)})}).then(function(){return e.get().then(function(e){expect(e).toBe(3)})})}),it("should be order agnostic",function(){var e=Queue();return Q.try(function(){return Q.delay(20).then(function(){e.put(1)})}).then(function(){return Q.delay(20).then(function(){e.put(2)})}).then(function(){return Q.delay(20).then(function(){e.put(3)})}).done(),Q.all([e.get().then(function(e){expect(e).toBe(1)}),e.get().then(function(e){expect(e).toBe(2)}),e.get().then(function(e){expect(e).toBe(3)})])}),it("should close",function(){var e=Queue();return Q.try(function(){return Q.delay(20).then(function(){e.put(1)})}).then(function(){return Q.delay(20).then(function(){e.put(2)})}).then(function(){e.close()}).done(),Q.try(function(){return e.get().then(function(e){expect(e).toBe(1)})}).then(function(){return e.get().then(function(e){expect(e).toBe(2)})}).then(function(){return e.get().then(function(e){expect(!1).toBe(!0)})}).catch(function(t){return expect(t.message).toBe("Can't get value from closed queue"),e.get()}).catch(function(e){expect(e.message).toBe("Can't get value from closed queue")}).then(function(){return e.closed}).then(function(e){expect(e.message).toBe("Can't get value from closed queue")})}),it("should close with alternate error",function(){var e=Queue();return e.close(new Error("Alternate reason")),Q.try(function(){return e.get()}).catch(function(t){return expect(t.message).toBe("Alternate reason"),e.get()}).catch(function(e){expect(e.message).toBe("Alternate reason")}).then(function(){return e.closed}).then(function(e){expect(e.message).toBe("Alternate reason")})})});