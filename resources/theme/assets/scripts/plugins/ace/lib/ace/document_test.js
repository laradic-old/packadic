typeof process!="undefined"&&(require("amd-loader"),require("./test/mockdom")),define(["require","exports","module","./document","./range","./test/assertions"],function(e,t,n){var r=e("./document").Document,i=e("./range").Range,s=e("./test/assertions");n.exports={"test: insert text in line":function(){var e=new r(["12","34"]),t=[];e.on("change",function(e){t.push(e.data)}),e.insert({row:0,column:1},"juhu"),s.equal(e.getValue(),["1juhu2","34"].join("\n"));var n=t.concat();e.revertDeltas(n),s.equal(e.getValue(),["12","34"].join("\n")),e.applyDeltas(n),s.equal(e.getValue(),["1juhu2","34"].join("\n"))},"test: insert new line":function(){var e=new r(["12","34"]),t=[];e.on("change",function(e){t.push(e.data)}),e.insertNewLine({row:0,column:1}),s.equal(e.getValue(),["1","2","34"].join("\n"));var n=t.concat();e.revertDeltas(n),s.equal(e.getValue(),["12","34"].join("\n")),e.applyDeltas(n),s.equal(e.getValue(),["1","2","34"].join("\n"))},"test: insert lines at the beginning":function(){var e=new r(["12","34"]),t=[];e.on("change",function(e){t.push(e.data)}),e.insertLines(0,["aa","bb"]),s.equal(e.getValue(),["aa","bb","12","34"].join("\n"));var n=t.concat();e.revertDeltas(n),s.equal(e.getValue(),["12","34"].join("\n")),e.applyDeltas(n),s.equal(e.getValue(),["aa","bb","12","34"].join("\n"))},"test: insert lines at the end":function(){var e=new r(["12","34"]),t=[];e.on("change",function(e){t.push(e.data)}),e.insertLines(2,["aa","bb"]),s.equal(e.getValue(),["12","34","aa","bb"].join("\n"))},"test: insert lines in the middle":function(){var e=new r(["12","34"]),t=[];e.on("change",function(e){t.push(e.data)}),e.insertLines(1,["aa","bb"]),s.equal(e.getValue(),["12","aa","bb","34"].join("\n"));var n=t.concat();e.revertDeltas(n),s.equal(e.getValue(),["12","34"].join("\n")),e.applyDeltas(n),s.equal(e.getValue(),["12","aa","bb","34"].join("\n"))},"test: insert multi line string at the start":function(){var e=new r(["12","34"]),t=[];e.on("change",function(e){t.push(e.data)}),e.insert({row:0,column:0},"aa\nbb\ncc"),s.equal(e.getValue(),["aa","bb","cc12","34"].join("\n"));var n=t.concat();e.revertDeltas(n),s.equal(e.getValue(),["12","34"].join("\n")),e.applyDeltas(n),s.equal(e.getValue(),["aa","bb","cc12","34"].join("\n"))},"test: insert multi line string at the end":function(){var e=new r(["12","34"]),t=[];e.on("change",function(e){t.push(e.data)}),e.insert({row:2,column:0},"aa\nbb\ncc"),s.equal(e.getValue(),["12","34aa","bb","cc"].join("\n"));var n=t.concat();e.revertDeltas(n),s.equal(e.getValue(),["12","34"].join("\n")),e.applyDeltas(n),s.equal(e.getValue(),["12","34aa","bb","cc"].join("\n"))},"test: insert multi line string in the middle":function(){var e=new r(["12","34"]),t=[];e.on("change",function(e){t.push(e.data)}),e.insert({row:0,column:1},"aa\nbb\ncc"),s.equal(e.getValue(),["1aa","bb","cc2","34"].join("\n"));var n=t.concat();e.revertDeltas(n),s.equal(e.getValue(),["12","34"].join("\n")),e.applyDeltas(n),s.equal(e.getValue(),["1aa","bb","cc2","34"].join("\n"))},"test: delete in line":function(){var e=new r(["1234","5678"]),t=[];e.on("change",function(e){t.push(e.data)}),e.remove(new i(0,1,0,3)),s.equal(e.getValue(),["14","5678"].join("\n"));var n=t.concat();e.revertDeltas(n),s.equal(e.getValue(),["1234","5678"].join("\n")),e.applyDeltas(n),s.equal(e.getValue(),["14","5678"].join("\n"))},"test: delete new line":function(){var e=new r(["1234","5678"]),t=[];e.on("change",function(e){t.push(e.data)}),e.remove(new i(0,4,1,0)),s.equal(e.getValue(),["12345678"].join("\n"));var n=t.concat();e.revertDeltas(n),s.equal(e.getValue(),["1234","5678"].join("\n")),e.applyDeltas(n),s.equal(e.getValue(),["12345678"].join("\n"))},"test: delete multi line range line":function(){var e=new r(["1234","5678","abcd"]),t=[];e.on("change",function(e){t.push(e.data)}),e.remove(new i(0,2,2,2)),s.equal(e.getValue(),["12cd"].join("\n"));var n=t.concat();e.revertDeltas(n),s.equal(e.getValue(),["1234","5678","abcd"].join("\n")),e.applyDeltas(n),s.equal(e.getValue(),["12cd"].join("\n"))},"test: delete full lines":function(){var e=new r(["1234","5678","abcd"]),t=[];e.on("change",function(e){t.push(e.data)}),e.remove(new i(1,0,3,0)),s.equal(e.getValue(),["1234",""].join("\n"))},"test: remove lines should return the removed lines":function(){var e=new r(["1234","5678","abcd"]),t=e.removeLines(1,2);s.equal(t.join("\n"),["5678","abcd"].join("\n"))},"test: should handle unix style new lines":function(){var e=new r(["1","2","3"]);s.equal(e.getValue(),["1","2","3"].join("\n"))},"test: should handle windows style new lines":function(){var e=new r(["1","2","3"].join("\r\n"));e.setNewLineMode("unix"),s.equal(e.getValue(),["1","2","3"].join("\n"))},"test: set new line mode to 'windows' should use '\\r\\n' as new lines":function(){var e=new r(["1","2","3"].join("\n"));e.setNewLineMode("windows"),s.equal(e.getValue(),["1","2","3"].join("\r\n"))},"test: set new line mode to 'unix' should use '\\n' as new lines":function(){var e=new r(["1","2","3"].join("\r\n"));e.setNewLineMode("unix"),s.equal(e.getValue(),["1","2","3"].join("\n"))},"test: set new line mode to 'auto' should detect the incoming nl type":function(){var e=new r(["1","2","3"].join("\n"));e.setNewLineMode("auto"),s.equal(e.getValue(),["1","2","3"].join("\n"));var e=new r(["1","2","3"].join("\r\n"));e.setNewLineMode("auto"),s.equal(e.getValue(),["1","2","3"].join("\r\n")),e.replace(new i(0,0,2,1),["4","5","6"].join("\n")),s.equal(["4","5","6"].join("\n"),e.getValue())},"test: set value":function(){var e=new r("1");s.equal("1",e.getValue()),e.setValue(e.getValue()),s.equal("1",e.getValue());var e=new r("1\n2");s.equal("1\n2",e.getValue()),e.setValue(e.getValue()),s.equal("1\n2",e.getValue())},"test: empty document has to contain one line":function(){var e=new r("");s.equal(e.$lines.length,1)},"test: ignore empty delta":function(){var e=new r("");e.on("change",function(){throw"should ignore empty delta"}),e.insert({row:0,column:0},""),e.insert({row:1,column:1},""),e.remove({start:{row:1,column:1},end:{row:1,column:1}})},"test: inserting huge delta":function(){var e=new r(""),t="",n=61440;for(var i=0;i<10*n;i++)t+=i+"\n";e.setValue(t),s.equal(e.getValue(),t);for(var i=3*n+2;i>=3*n-2;i--)t=e.getLines(0,i).join("\n"),e.setValue("\nab"),s.equal(e.getValue(),"\nab"),e.insert({row:1,column:1},t),s.equal(e.getValue(),"\na"+t+"b")}}}),typeof module!="undefined"&&module===require.main&&require("asyncjs").test.testcase(module.exports).exec();