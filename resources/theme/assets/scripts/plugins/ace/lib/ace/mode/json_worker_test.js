typeof process!="undefined"&&require("amd-loader"),define(["require","exports","module","../test/assertions","./json_worker"],function(e,t,n){var r=e("../test/assertions"),i=e("./json_worker").JsonWorker;n.exports={setUp:function(){this.sender={on:function(){},callback:function(e,t){this.data=e},events:[],emit:function(e,t){this.events.push([e,t])}}},"test check valid json":function(){var e=new i(this.sender);e.setValue("{}"),e.deferredUpdate.call(),r.equal(this.sender.events[0][1].length,0)},"test check for syntax error":function(){var e=new i(this.sender);e.setValue(["{","juhu: 12","}"].join("\n")),e.deferredUpdate.call();var t=this.sender.events[0];r.equal(t[0],"annotate"),r.equal(t[1].length,1),r.equal(t[1][0].type,"error"),r.equal(t[1][0].text,"Bad string"),r.equal(t[1][0].row,1),r.equal(t[1][0].column,0)},"test check for syntax error at first char":function(){var e=new i(this.sender);e.setValue("x"),e.deferredUpdate.call();var t=this.sender.events[0];r.equal(t[0],"annotate"),r.equal(t[1][0].type,"error"),r.equal(t[1][0].text,"Unexpected 'x'"),r.equal(t[1][0].row,0),r.equal(t[1][0].column,0)}}}),typeof module!="undefined"&&module===require.main&&require("asyncjs").test.testcase(module.exports).exec();