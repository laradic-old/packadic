var simpleEvents=require("nodeunit").testCase,file="../../lib/eventemitter2",EventEmitter2;typeof require!="undefined"?EventEmitter2=require(file).EventEmitter2:EventEmitter2=window.EventEmitter2,module.exports=simpleEvents({"1. Add a single listener on a single event.":function(e){var t=new EventEmitter2({verbose:!0});t.on("test1",function(){e.ok(!0,"The event was raised")}),e.equal(t.listeners("test1").length,1,"There are three emitters"),e.expect(1),e.done()},"2. Add two listeners on a single event.":function(e){var t=new EventEmitter2({verbose:!0});t.on("test1",function(){e.ok(!0,"The event was raised")}),t.on("test1",function(){e.ok(!0,"The event was raised")}),e.equal(t.listeners("test1").length,2,"There are three emitters"),e.expect(1),e.done()},"3. Add three listeners on a single event.":function(e){var t=new EventEmitter2({verbose:!0});t.on("test1",function(){e.ok(!0,"The event was raised")}),t.on("test1",function(){e.ok(!0,"The event was raised")}),t.on("test1",function(){e.ok(!0,"The event was raised")}),e.equal(t.listeners("test1").length,3,"There are three emitters"),e.expect(1),e.done()},"4. Add two listeners to two different events.":function(e){var t=new EventEmitter2({verbose:!0});t.on("test1",function(){e.ok(!0,"The event was raised")}),t.on("test1",function(){e.ok(!0,"The event was raised")}),t.on("test2",function(){e.ok(!0,"The event was raised")}),t.on("test2",function(){e.ok(!0,"The event was raised")}),e.equal(t.listeners("test1").length,2,"There are two emitters"),e.equal(t.listeners("test2").length,2,"There are two emitters"),e.expect(2),e.done()},"5. Never adding any listeners should yield a listeners array with the length of 0.":function(e){var t=new EventEmitter2({verbose:!0});t.on("test1",function(){e.ok(!0,"The event was raised")}),e.equal(t.listeners("test2").length,0,"There are no emitters"),e.expect(1),e.done()},"6. the listener added should be the right listener.":function(e){var t=new EventEmitter2({verbose:!0}),n="somelistenerbar",r=function(){};t.on(n,r),e.equal(t.listeners(n).length,1,"There are is one emitters"),e.equal(t.listeners(n)[0],r,"The function should be f"),e.expect(2),e.done()},"7. should be able to listen on any event":function(e){var t=new EventEmitter2({verbose:!0}),n=function(){e.ok(!0,"the event was fired")};t.onAny(n),t.emit("test23.ns5.ns5","someData"),t.offAny(n),t.emit("test21"),t.onAny(n),t.onAny(n),t.emit("test23.ns5.ns5","someData"),e.expect(3),e.done()},"8. should be able to listen on any event (should cause an error)":function(e){var t=new EventEmitter2({verbose:!0}),n=function(){e.ok(!0,"the event was fired")};t.onAny(n),t.emit("error"),e.expect(1),e.done()},"9. onAny alias":function(e){var t=new EventEmitter2({verbose:!0}),n=function(){e.ok(!0,"the event was fired")};t.on(n),t.emit("foo"),t.emit("bar"),e.expect(2),e.done()},"10. onAny with invalid argument":function(e){var t=new EventEmitter2({verbose:!0});e.throws(function(){t.onAny(null)},"An exception should be thrown"),e.ok(!t.emit("foo"),"emit should not return true"),e.expect(2),e.done()}});