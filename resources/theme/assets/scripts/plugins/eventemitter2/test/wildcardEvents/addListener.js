var simpleEvents=require("nodeunit").testCase,file="../../lib/eventemitter2",EventEmitter2;typeof require!="undefined"?EventEmitter2=require(file).EventEmitter2:EventEmitter2=window.EventEmitter2,module.exports=simpleEvents({"1. Add a single listener on a single event.":function(e){var t=new EventEmitter2({wildcard:!0}),n="some.listener.bar";t.on(n,function(){e.ok(!0,"The event was raised")}),e.equal(t.listeners(n).length,1,"There are three emitters"),e.expect(1),e.done()},"1a. Add a single listener on a single event (using an array).":function(e){var t=new EventEmitter2({wildcard:!0}),n=["some","listener","bar"];t.on(n,function(){e.ok(!0,"The event was raised")}),e.equal(t.listeners(n).length,1,"There are three emitters"),e.expect(1),e.done()},"2. Add two listeners on a single event.":function(e){var t=new EventEmitter2({wildcard:!0}),n="some.listener.bar";t.on(n,function(){e.ok(!0,"The event was raised")}),t.on(n,function(){e.ok(!0,"The event was raised")}),e.equal(t.listeners(n).length,2,"There are three emitters"),e.expect(1),e.done()},"2a. Add two listeners on a single event (using an array).":function(e){var t=new EventEmitter2({wildcard:!0}),n=["some","listener","bar"];t.on(n,function(){e.ok(!0,"The event was raised")}),t.on(n,function(){e.ok(!0,"The event was raised")}),e.equal(t.listeners(n).length,2,"There are three emitters"),e.expect(1),e.done()},"3. Add three listeners on a single event.":function(e){var t=new EventEmitter2({wildcard:!0}),n="some.listener.bar";t.on(n,function(){e.ok(!0,"The event was raised")}),t.on(n,function(){e.ok(!0,"The event was raised")}),t.on(n,function(){e.ok(!0,"The event was raised")}),e.equal(t.listeners(n).length,3,"There are three emitters"),e.expect(1),e.done()},"4. Add two listeners to two different events.":function(e){var t=new EventEmitter2({wildcard:!0}),n="some.listener.bar";t.on(n,function(){e.ok(!0,"The event was raised")}),t.on(n,function(){e.ok(!0,"The event was raised")}),t.on("test2",function(){e.ok(!0,"The event was raised")}),t.on("test2",function(){e.ok(!0,"The event was raised")}),e.equal(t.listeners(n).length,2,"There are two emitters"),e.equal(t.listeners("test2").length,2,"There are two emitters"),e.expect(2),e.done()},"5. Never adding any listeners should yield a listeners array with the length of 0.":function(e){var t=new EventEmitter2({wildcard:!0}),n="some.listener.bar";t.on(n,function(){e.ok(!0,"The event was raised")}),e.equal(t.listeners("test2").length,0,"There are no emitters"),e.expect(1),e.done()},"6. the listener added should be the right listener.":function(e){var t=new EventEmitter2({wildcard:!0}),n="some.listener.bar",r=function(){};t.on(n,r),e.equal(t.listeners(n).length,1,"There are is one emitters"),e.equal(t.listeners(n)[0],r,"The function should be f"),e.expect(2),e.done()},"7. Listeners on `*`, `*.*`, `*.test` with emissions from `foo.test` and `other.emit`":function(e){var t=new EventEmitter2({wildcard:!0}),n=function(){e.ok(!0,"the event was fired")};t.on("*.test",n),t.on("*.*",n),t.on("*",n),t.emit("other.emit"),t.emit("foo.test"),e.expect(3),e.done()},"8. Listeners on `*`, `*.*`, foo.test with emissions from `*`, `*.*` and `foo.test`":function(e){var t=new EventEmitter2({wildcard:!0}),n=function(){e.ok(!0,"the event was fired")};t.on("foo.test",n),t.on("*.*",n),t.on("*",n),t.emit("*.*"),t.emit("foo.test"),t.emit("*"),e.expect(5),e.done()},"9. Listeners on `*`. (using an array)":function(e){var t=new EventEmitter2({wildcard:!0}),n=function(){e.ok(!0,"the event was fired")};t.on(["*"],n),t.emit("*"),e.expect(1),e.done()},"10. actual event name":function(e){var t=new EventEmitter2({wildcard:!0});t.on("foo",function(){t.emit("bar")}),t.on("*",function(){console.log(this.event)}),t.emit("foo"),e.done()},"11. Listeners with multi-level wildcards":function(e){var t=new EventEmitter2({wildcard:!0}),n=0,r=function(t){return function(){e.ok(!0,"the event was fired")}};t.on("**.test",r(n++)),t.on("**.bar.**",r(n++)),t.on("**.*",r(n++)),t.on("*.**",r(n++)),t.on("**",r(n++)),t.on("other.**",r(n++)),t.on("foo.**.test",r(n++)),t.on("test.**",r(n++)),t.on("**.**",r(n++)),t.on("a.b.**.**",r(n++)),t.on("**.**.a.b",r(n++)),t.on("a.b.**.**.a.b",r(n++)),t.emit("other.emit"),t.emit("foo.bar.test"),t.emit("foo.bar.test.bar.foo.test.foo"),t.emit("bar.bar.bar.bar.bar.bar"),t.emit("**.*"),t.emit("test"),t.emit("foo.test"),t.emit("foo.**.*"),t.emit("**.test"),t.emit("**.test.**"),e.expect(58),e.done()},"12. Check return values of emit for wildcard emitter.":function(e){var t=new EventEmitter2({wildcard:!0});t.on("foo.*",function(){e.ok(!0,"The event was raised")}),t.onAny(function(){e.ok(!0,"The event was raised")}),e.ok(t.emit("foo.blah"),"emit should return true after calling a listener"),e.ok(t.emit("bar"),"emit should return true after calling a listener"),e.expect(5),e.done()}});